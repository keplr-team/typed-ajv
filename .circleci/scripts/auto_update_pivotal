#!/usr/bin/env bash

## Script variables
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

## Conf
GITHUB_API="https://api.github.com"
GITHUB_REPOSITORY_NAME=$(echo ${CIRCLE_REPOSITORY_URL} | cut -d '/' -f 2 | sed 's|.git||g')
PIVOTAL_API="https://www.pivotaltracker.com/services/v5"

##
## Help
if [[ $# -ne 0 || $1 == '--help' ]]; then
    echo "Auto update pivotal"
    echo "Usage:    ./auto_update_pivotal"
    echo "Description:"
    echo "This script check if current commit comes from a merged Github PR and update linked pivotal tracker ticket if needed (From finished to delivered state)"
    echo "Auto update pivotal:"
    echo "          --help"
    exit 0
fi

## Checks
if [[ -z ${GITHUB_ORG_TOKEN} ]]; then
    echo "Please setup env varibable GITHUB_ORG_TOKEN"
    exit 1
fi
if [[ -z ${PIVOTAL_TOKEN} ]]; then
    echo "Please setup env varibable PIVOTAL_TOKEN"
    exit 1
fi

## Retrieve current commit sha
if [[ -z ${CIRCLE_SHA1} ]]; then
    echo "Please use this script only on a CircleCI environment or set CIRCLE_SHA1 var to the commit you want to check"
    exit 1
fi
CURRENT_COMMIT=${CIRCLE_SHA1}

## Retrieve commit information
apiRet=$(curl -s -H "Authorization: token ${GITHUB_ORG_TOKEN}" ${GITHUB_API}/search/issues?q=${CURRENT_COMMIT})

### Results
totalCount=$(echo ${apiRet} | perl -n -e '/.*"total_count": *([0-9]{1,10}),/ && print $1')

if [[ ${totalCount} -eq 0 ]]; then
    echo "Nothing to do. Exiting ..."
    exit 0
else
    echo "Commit comes from a PR, seeking for a pivotal id ..."
fi

### Extract PR link
pullRequestId=$(echo ${apiRet} | perl -n -e '/.*issues\/([0-9]{1,10})"/ && print $1')

if [[ -z ${pullRequestId} ]]; then
    echo "Nothing to do. Exiting ..."
    exit 0
fi

### Retrieve PR Informations
refBranch=$(curl -s -H "Authorization: token ${GITHUB_ORG_TOKEN}" ${GITHUB_API}/repos/${CIRCLE_PROJECT_USERNAME}/${GITHUB_REPOSITORY_NAME}/pulls/${pullRequestId} | grep '"head":' -A 3 | perl -n -e '/.*"ref": "(.*)",/ && print $1')
if [[ -z ${refBranch} ]]; then
    echo "No branch found. Exiting ..."
    exit 0
fi

### Check if branch if a pivotal branch
pivotalID=$(echo ${refBranch} | perl -n -e '/^([0-9]{9})-.*/ && print $1')

if [[ -z ${pivotalID} ]]; then
    echo "Not a pivotal branch. Exiting ..."
    exit 0
fi

### Update pivotal ticket
echo "Processing pivotal ticket: ${pivotalID} ..."

apiRet=$(curl -s -X GET -H "X-TrackerToken: ${PIVOTAL_TOKEN}" "${PIVOTAL_API}/stories/${pivotalID}")

pivotalTicketState=$(echo ${apiRet} | perl -n -e '/"current_state":"([a-z]*)",/ && print $1')
pivotalProjectId=$(echo ${apiRet} | perl -n -e '/"project_id":([0-9]*),/ && print $1')

if [[ -z ${pivotalTicketState} ]]; then
    echo "Can't get ticket current state. Exiting ..."
    exit 0
elif [[ ${pivotalTicketState} == 'started' ]] || [[ ${pivotalTicketState} == 'finished' ]]; then
    echo "ProjectId is: ${pivotalProjectId}"
    echo "Current state is: '${pivotalTicketState}', Updating to 'delivered' ..."
    echo ""
else
    echo "Current state is: ${pivotalTicketState}, nothing to do ..."
    exit 0
fi

curl -X PUT -H "X-TrackerToken: ${PIVOTAL_TOKEN}" -H "Content-Type: application/json" -d '{"current_state":"delivered"}' "${PIVOTAL_API}/projects/${pivotalProjectId}/stories/${pivotalID}" -v 2>&1 | grep status
exit 0
